; NekoMake build script for nekosys
;

; Compiler
GCC = neko-gcc

; Compiler base config
CCBASECONF = -std=gnu++11 -Wall -Wextra -O2 -mgeneral-regs-only -mno-red-zone -fno-exceptions -fno-pie -fno-rtti

; Compiler flags for kernel
KFLAGS = -ffreestanding -nostdlib -lelf -lk

; Assembler
[asm, multi]:
    nasm -f {format=bin} {input} -o {output}

; Kernel compiler
[kcc, single]:
    {GCC} {input} -o {output} -T kernel.ld {KFLAGS} {CCBASECONF}

; Lib compiler
[flibcc, multi]:
    {GCC} -c {input} -o {output} {CCBASECONF} {flags}
[olibcc, multi]:
    {GCC} -c {input} -o {output} -fno-rtti -O3 -fno-exceptions
[libcc, multi]:
    {GCC} -c {input} -o {output} -fno-rtti -fno-exceptions

; GNU ar
[ar, single]:
    ar rcs {output} {input}

; Default: Compile everything
default:
    % clean
    % sysroot
    % libk
    % libc
    % libelf
    % libpng
    % libgui
    % libgfx
    % bootloader
    % kernel

; Reset build directory
clean:
    rm -rf build/

    ; Build dirs
    mkdir -p build/kernel
    mkdir -p build/libk
    mkdir -p build/libc
    mkdir -p build/libelf
    mkdir -p build/libpng
    mkdir -p build/libgui
    mkdir -p build/libgfx

    ; Sysroot
    mkdir -p sysroot/usr/include
    mkdir -p sysroot/usr/lib
    rm -rf sysroot/usr/include/*
    rm -rf sysroot/usr/lib/*

; Set up the sysroot
sysroot:
    cp -RT kernel/include sysroot/usr/include
    cp -RT libc/include sysroot/usr/include
    cp -RT libelf/include sysroot/usr/include
    cp -RT libpng/include sysroot/usr/include
    cp -RT libgui/include sysroot/usr/include
    cp -RT libneko/include sysroot/usr/include
    cp -RT libgfx/include sysroot/usr/include

; Compile kernel version of libc
libk:
    [flibcc]
        input: libc/**.c
               libc/**.cpp
        flags: -ffreestanding -D__KERNEL
        output: build/libk/~.o
    [ar]
        input: build/libk/*.o
        output: sysroot/usr/lib/libk.a

; Compile regular libc
libc:
    [libcc]
        input: libc/**.c
               libc/**.cpp
               libc/**.S
        output: build/libc/~.o
    [ar]
        input: build/libc/*.o
        output: sysroot/usr/lib/libc.a
    cp build/libc/crt0.o sysroot/usr/lib

libelf:
    [libcc]
        input: libelf/**.cpp
        output: build/libelf/~.o
    [ar]
        input: build/libelf/*.o
        output: sysroot/usr/lib/libelf.a

libpng:
    [libcc]
        input: libpng/**.cpp
        output: build/libpng/~.o
    [ar]
        input: build/libpng/*.o
        output: sysroot/usr/lib/libpng.a

libgui:
    [libcc]
        input: libgui/**.cpp
        output: build/libgui/~.o
    [ar]
        input: build/libgui/*.o
        output: sysroot/usr/lib/libgui.a

libgfx:
    [olibcc]
        input: libgfx/**.cpp
        output: build/libgfx/~.o
    [ar]
        input: build/libgfx/*.o
        output: sysroot/usr/lib/libgfx.a

; Compiles the bootloader
bootloader:
    [asm]
        input: boot/*.asm
        output: build/~.bin  

; Compiles the kernel
kernel:
    [asm]
        input: kernel/**.asm
        format: elf32
        output: build/kernel/~.o

    [kcc]
        input: build/kernel/*.o
               kernel/**.cpp
        output: build/koneko.bin

; Creates a bootable image
image:
    cp build/koneko.bin sysroot
    nkimg -s build/boot.bin -l build/loader.bin -r sysroot -o build/neko.img

; Compile, create an image, and run in QEMU
run:
    % default
    % image
    qemu-system-i386 -m 512M -drive format=raw,file=build/neko.img -usb -vga std -d cpu_reset -no-reboot -serial stdio